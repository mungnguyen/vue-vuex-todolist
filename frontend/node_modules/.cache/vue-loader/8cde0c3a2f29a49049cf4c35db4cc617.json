{"remainingRequest":"/home/mung_nguyen/20183/example/todolist/ToDoList/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mung_nguyen/20183/example/todolist/ToDoList/frontend/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/mung_nguyen/20183/example/todolist/ToDoList/frontend/src/App.vue","mtime":1561650871645},{"path":"/home/mung_nguyen/20183/example/todolist/ToDoList/frontend/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/mung_nguyen/20183/example/todolist/ToDoList/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mung_nguyen/20183/example/todolist/ToDoList/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mung_nguyen/20183/example/todolist/ToDoList/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mung_nguyen/20183/example/todolist/ToDoList/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.header {\n  padding: 0.5em;\n  font-size: 2em;\n  color: rgb(89, 125, 201);\n  background-color: rgb(233, 240, 247);\n  box-shadow: 1em;\n}\n\n.to-do-list {\n  border-right: 0.05em solid rgb(134, 131, 131);\n  margin: 0;\n  padding-top: 0.5em;\n  padding-right: 0;\n  height: 33.8em;\n}\n\n.todo span {\n  margin-left: 3em;\n  font: 1em sans-serif;\n}\n\n.delete {\n  position: absolute;\n  right: 1em;\n  color: grey;\n}\n\n.delete:hover {\n  color: black;\n}\n\n.filter {\n  position: absolute;\n  bottom: 1em;\n  left: 5em;\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoSA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <link rel=\"stylesheet\" href=\"../node_modules/@fortawesome/fontawesome-free/css/all.css\">\n    <div class=\"header\">\n      <center>TO-DO LIST</center>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-4 to-do-list\">\n        <div>\n          <div\n            v-for=\"(item, index) in list\"\n            v-bind:item=\"item\"\n            v-bind:index=\"index\"\n            v-bind:key=\"item.id\"\n          >\n            <ToDoList style=\"cursor: pointer\" :todo=\"item\" v-if=\"!item.tick\"/>\n          </div>\n        </div>\n        <div>\n          <div\n            v-for=\"(item, index) in list\"\n            v-bind:item=\"item\"\n            v-bind:index=\"index\"\n            v-bind:key=\"item.id\"\n          >\n            <ToDoList style=\"cursor: pointer\" :todo=\"item\" v-if=\"item.tick\"/>\n          </div>\n        </div>\n        <center>\n          <b-button pill v-b-modal.modal variant=\"outline-primary\">Add new</b-button>\n        </center>\n        <b-modal\n          id=\"modal\"\n          ref=\"modal\"\n          :title=\"modalTitle\"\n          @show=\"resetModal\"\n          @hidden=\"reset\"\n          @ok=\"handleOk\"\n        >\n          <form @submit.stop.prevent=\"handleSubmit\">\n            <b-form-group\n              ref=\"titleForm\"\n              :state=\"titleState\"\n              label-cols-md=\"2\"\n              label=\"Tilte\"\n              label-for=\"title\"\n              invalid-feedback=\"Title is required\"\n            >\n              <b-form-input id=\"title\" v-model=\"title\" :state=\"titleState\" required></b-form-input>\n            </b-form-group>\n\n            <b-form-group\n              ref=\"bodyForm\"\n              :state=\"bodyState\"\n              label-cols-md=\"2\"\n              label=\"Body\"\n              label-for=\"body\"\n              invalid-feedback=\"Body is required\"\n            >\n              <b-form-input id=\"body\" v-model=\"body\" :state=\"bodyState\" required></b-form-input>\n            </b-form-group>\n\n            <b-form-group\n              ref=\"startDateForm\"\n              :state=\"startDateState\"\n              label-cols-md=\"2\"\n              label=\"Start: \"\n              label-for=\"startDate\"\n              invalid-feedback=\"Start date is invalid\"\n            >\n              <b-form-input\n                id=\"startDate\"\n                v-model=\"startDate\"\n                :value=\"startDate\"\n                :state=\"startDateState\"\n                required\n                type=\"date\"\n              ></b-form-input>\n            </b-form-group>\n            <b-form-group\n              ref=\"endDateForm\"\n              :state=\"endDateState\"\n              label-cols-md=\"2\"\n              label=\"End: \"\n              label-for=\"endDate\"\n              invalid-feedback=\"End date is invalid\"\n            >\n              <b-form-input\n                id=\"endDate\"\n                v-model=\"endDate\"\n                :state=\"endDateState\"\n                required\n                type=\"date\"\n              ></b-form-input>\n            </b-form-group>\n          </form>\n        </b-modal>\n        <div class=\"filter\">\n          <center>\n            <b-button-group>\n              <b-button @click=\"changeFilter('all')\" variant=\"outline-primary\">All</b-button>\n              <b-button @click=\"changeFilter('completed')\" variant=\"outline-secondary\">Completed</b-button>\n              <b-button @click=\"changeFilter('uncompleted')\" variant=\"outline-success\">Uncompleted</b-button>\n            </b-button-group>\n          </center>\n        </div>\n      </div>\n      <div class=\"col-md-8\" style=\"padding-left: 3em\">\n        <div v-if=\"todo\">\n          <p style=\"margin-top: 3em\">\n            <b>Title:</b>\n            {{ this.todo.title}}\n          </p>\n          <br>\n          <p>\n            <b>Body:</b>\n            {{ this.todo.body }}\n          </p>\n          <br>\n          <p>\n            <b>Start:</b>\n            {{ this.todo.startDate | formatDate }}\n          </p>\n          <br>\n          <p>\n            <b>End:</b>\n            {{ this.todo.endDate | formatDate }}\n          </p>\n          <br v-if=\"this.todo.tick\">\n          <p v-if=\"this.todo.tick\">\n            <b>Done:</b>\n            {{ this.todo.doneDate | formatDate }}\n          </p>\n          <br>\n          <b-button pill v-b-modal.modal variant=\"outline-primary\" :pressed.sync=\"update\">Update</b-button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// import HelloWorld from './components/HelloWorld.vue';\nimport ToDoList from \"./components/ToDoList.vue\";\nimport moment from \"moment\";\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"app\",\n\n  components: {\n    ToDoList\n  },\n\n  data: function() {\n    return {\n      filter: \"all\",\n      title: \"\",\n      titleState: null,\n      body: \"\",\n      bodyState: null,\n      startDate: \"\",\n      startDateState: \"\",\n      endDate: \"\",\n      endDateState: null,\n      update: false,\n      todo: null,\n      modalTitle: \"\"\n    };\n  },\n\n  computed: {\n    ...mapState({\n      list(state) {\n        if (this.filter === \"all\") return state.todoModule.list;\n        if (this.filter === \"completed\")\n          return state.todoModule.list.filter(item => item.tick);\n        if (this.filter === \"uncompleted\")\n          return state.todoModule.list.filter(item => !item.tick);\n      }\n    })\n  },\n\n  methods: {\n    checkFormValidity() {\n      const validTitle = this.title.length > 0 ? true : false;\n      this.titleState = validTitle ? \"valid\" : \"invalid\";\n\n      const validBody = this.body.length > 0 ? true : false;\n      this.bodyState = validBody ? \"valid\" : \"invalid\";\n\n      const now = moment().format(\"MM-DD-YYYY\");\n\n      const validStart = this.startDate ? true : false;\n      this.startDateState = validStart ? \"valid\" : \"invalid\";\n\n      const validDate =\n        !this.endDate || this.endDate < now || this.endDate < this.startDate\n          ? false\n          : true;\n      this.endDateState = validDate ? \"valid\" : \"invalid\";\n\n      return validTitle && validBody && validDate && validStart;\n    },\n\n    resetModal() {\n      if (!this.update) {\n        this.modalTitle = \"Add new to-do\";\n        this.title = \"\";\n        this.titleState = null;\n        this.body = \"\";\n        this.bodyState = null;\n        (this.startDate = \"\"),\n          (this.startDateState = null),\n          (this.endDate = \"\"),\n          (this.endDateState = null);\n      } else {\n        this.modalTitle = \"Update to-do\";\n        this.title = this.todo.title;\n        this.titleState = null;\n        this.body = this.todo.body;\n        this.bodyState = null;\n        (this.startDate = moment(this.todo.startDate)),\n          (this.startDateState = null);\n        this.endDate = moment(this.todo.endDate);\n        this.endDateState = null;\n      }\n    },\n\n    reset() {\n      this.resetModal();\n      this.update = false;\n    },\n\n    setTodo(todo) {\n      this.todo = todo;\n    },\n\n    handleOk(bvModalEvt) {\n      // Prevent modal from closing\n      bvModalEvt.preventDefault();\n      // Trigger submit handler\n      this.handleSubmit();\n      this.update = false;\n    },\n\n    handleSubmit() {\n      // Exit when the form isn't valid\n      if (!this.checkFormValidity()) {\n        return;\n      }\n      // Push the name to submitted names\n      const todoChange = {\n        title: this.title,\n        body: this.body,\n        startDate: moment(this.startDate).format(\"YYYY/MM/DD\"),\n        endDate: moment(this.endDate).format(\"YYYY/MM/DD\")\n      };\n      if (this.update) {\n        this.$store.commit(\"setId\", this.todo.id);\n        this.$store.commit(\"setTodo\", todoChange);\n        this.$store.dispatch(\"updateTodo\");\n        this.setTodo(todoChange);\n      } else {\n        this.$store.commit(\"setTodo\", todoChange);\n        this.$store.dispatch(\"addTodo\");\n      }\n\n      // this.$refs.modal.hide();\n      // Hide the modal manually\n      this.$nextTick(() => {\n        this.$refs.modal.hide();\n      });\n    },\n\n    deleteTodo(id) {\n      this.$store.commit(\"setId\", id);\n      this.$store.dispatch(\"deleteTodo\");\n    },\n\n    changeFilter(filte) {\n      this.filter = filte;\n    }\n  },\n\n  mounted() {\n    this.$store.dispatch(\"getAllTodo\");\n  }\n};\n</script>\n\n<style>\n.header {\n  padding: 0.5em;\n  font-size: 2em;\n  color: rgb(89, 125, 201);\n  background-color: rgb(233, 240, 247);\n  box-shadow: 1em;\n}\n\n.to-do-list {\n  border-right: 0.05em solid rgb(134, 131, 131);\n  margin: 0;\n  padding-top: 0.5em;\n  padding-right: 0;\n  height: 33.8em;\n}\n\n.todo span {\n  margin-left: 3em;\n  font: 1em sans-serif;\n}\n\n.delete {\n  position: absolute;\n  right: 1em;\n  color: grey;\n}\n\n.delete:hover {\n  color: black;\n}\n\n.filter {\n  position: absolute;\n  bottom: 1em;\n  left: 5em;\n}\n</style>\n"]}]}